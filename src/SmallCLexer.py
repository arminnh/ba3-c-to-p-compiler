# Generated from SmallC.g4 by ANTLR 4.5.2
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2:")
        buf.write("\u0175\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\3\2\3")
        buf.write("\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35")
        buf.write("\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3,\3,\3,\3,\3,\3-\3")
        buf.write("-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write("\7\63\u0139\n\63\f\63\16\63\u013c\13\63\3\63\3\63\3\64")
        buf.write("\6\64\u0141\n\64\r\64\16\64\u0142\3\65\3\65\3\65\3\65")
        buf.write("\3\65\5\65\u014a\n\65\3\65\5\65\u014d\n\65\3\65\3\65\3")
        buf.write("\65\5\65\u0152\n\65\3\65\3\65\5\65\u0156\n\65\3\66\6\66")
        buf.write("\u0159\n\66\r\66\16\66\u015a\3\67\3\67\3\67\5\67\u0160")
        buf.write("\n\67\3\67\3\67\38\38\38\38\78\u0168\n8\f8\168\u016b\13")
        buf.write("8\38\38\39\69\u0170\n9\r9\169\u0171\39\39\2\2:\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:\3\2\16\4\2")
        buf.write("\'\'\61\61\4\2\f\f\17\17\3\2\62;\4\2GGgg\4\2--//\5\2\62")
        buf.write(";C\\c|\3\2))\3\2$$\3\2^^\6\2$$^^pptt\6\2\f\f\17\17$$^")
        buf.write("^\5\2\13\f\17\17\"\"\u017f\2\3\3\2\2\2\2\5\3\2\2\2\2\7")
        buf.write("\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2")
        buf.write("\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2")
        buf.write("\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2")
        buf.write("\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2")
        buf.write("\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2")
        buf.write("\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\3s\3\2\2\2\5u\3\2\2")
        buf.write("\2\7w\3\2\2\2\ty\3\2\2\2\13|\3\2\2\2\r\177\3\2\2\2\17")
        buf.write("\u0082\3\2\2\2\21\u0085\3\2\2\2\23\u0088\3\2\2\2\25\u008b")
        buf.write("\3\2\2\2\27\u008d\3\2\2\2\31\u008f\3\2\2\2\33\u0091\3")
        buf.write("\2\2\2\35\u0093\3\2\2\2\37\u0095\3\2\2\2!\u0098\3\2\2")
        buf.write("\2#\u009b\3\2\2\2%\u009d\3\2\2\2\'\u009f\3\2\2\2)\u00a8")
        buf.write("\3\2\2\2+\u00aa\3\2\2\2-\u00ac\3\2\2\2/\u00b1\3\2\2\2")
        buf.write("\61\u00c8\3\2\2\2\63\u00ca\3\2\2\2\65\u00cc\3\2\2\2\67")
        buf.write("\u00ce\3\2\2\29\u00d0\3\2\2\2;\u00d2\3\2\2\2=\u00d4\3")
        buf.write("\2\2\2?\u00d6\3\2\2\2A\u00d8\3\2\2\2C\u00da\3\2\2\2E\u00dc")
        buf.write("\3\2\2\2G\u00de\3\2\2\2I\u00e3\3\2\2\2K\u00e9\3\2\2\2")
        buf.write("M\u00ed\3\2\2\2O\u00f2\3\2\2\2Q\u00f8\3\2\2\2S\u0101\3")
        buf.write("\2\2\2U\u0109\3\2\2\2W\u010c\3\2\2\2Y\u0111\3\2\2\2[\u0114")
        buf.write("\3\2\2\2]\u011a\3\2\2\2_\u011e\3\2\2\2a\u0124\3\2\2\2")
        buf.write("c\u012d\3\2\2\2e\u0134\3\2\2\2g\u0140\3\2\2\2i\u0155\3")
        buf.write("\2\2\2k\u0158\3\2\2\2m\u015c\3\2\2\2o\u0163\3\2\2\2q\u016f")
        buf.write("\3\2\2\2st\7?\2\2t\4\3\2\2\2uv\7A\2\2v\6\3\2\2\2wx\7<")
        buf.write("\2\2x\b\3\2\2\2yz\7~\2\2z{\7~\2\2{\n\3\2\2\2|}\7(\2\2")
        buf.write("}~\7(\2\2~\f\3\2\2\2\177\u0080\7?\2\2\u0080\u0081\7?\2")
        buf.write("\2\u0081\16\3\2\2\2\u0082\u0083\7#\2\2\u0083\u0084\7?")
        buf.write("\2\2\u0084\20\3\2\2\2\u0085\u0086\7>\2\2\u0086\u0087\7")
        buf.write("?\2\2\u0087\22\3\2\2\2\u0088\u0089\7@\2\2\u0089\u008a")
        buf.write("\7?\2\2\u008a\24\3\2\2\2\u008b\u008c\7-\2\2\u008c\26\3")
        buf.write("\2\2\2\u008d\u008e\7/\2\2\u008e\30\3\2\2\2\u008f\u0090")
        buf.write("\7,\2\2\u0090\32\3\2\2\2\u0091\u0092\7\61\2\2\u0092\34")
        buf.write("\3\2\2\2\u0093\u0094\7\'\2\2\u0094\36\3\2\2\2\u0095\u0096")
        buf.write("\7-\2\2\u0096\u0097\7-\2\2\u0097 \3\2\2\2\u0098\u0099")
        buf.write("\7/\2\2\u0099\u009a\7/\2\2\u009a\"\3\2\2\2\u009b\u009c")
        buf.write("\7(\2\2\u009c$\3\2\2\2\u009d\u009e\7#\2\2\u009e&\3\2\2")
        buf.write("\2\u009f\u00a0\7%\2\2\u00a0\u00a1\7k\2\2\u00a1\u00a2\7")
        buf.write("p\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4\7n\2\2\u00a4\u00a5")
        buf.write("\7w\2\2\u00a5\u00a6\7f\2\2\u00a6\u00a7\7g\2\2\u00a7(\3")
        buf.write("\2\2\2\u00a8\u00a9\7\60\2\2\u00a9*\3\2\2\2\u00aa\u00ab")
        buf.write("\7=\2\2\u00ab,\3\2\2\2\u00ac\u00ad\7o\2\2\u00ad\u00ae")
        buf.write("\7c\2\2\u00ae\u00af\7k\2\2\u00af\u00b0\7p\2\2\u00b0.\3")
        buf.write("\2\2\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\u00b4")
        buf.write("\7v\2\2\u00b4\u00b5\7\"\2\2\u00b5\u00b6\7c\2\2\u00b6\u00b7")
        buf.write("\7t\2\2\u00b7\u00b8\7i\2\2\u00b8\u00b9\7e\2\2\u00b9\u00ba")
        buf.write("\7.\2\2\u00ba\u00bb\7\"\2\2\u00bb\u00bc\7e\2\2\u00bc\u00bd")
        buf.write("\7j\2\2\u00bd\u00be\7c\2\2\u00be\u00bf\7t\2\2\u00bf\u00c0")
        buf.write("\7\"\2\2\u00c0\u00c1\7,\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3")
        buf.write("\7t\2\2\u00c3\u00c4\7i\2\2\u00c4\u00c5\7x\2\2\u00c5\u00c6")
        buf.write("\7]\2\2\u00c6\u00c7\7_\2\2\u00c7\60\3\2\2\2\u00c8\u00c9")
        buf.write("\7.\2\2\u00c9\62\3\2\2\2\u00ca\u00cb\7*\2\2\u00cb\64\3")
        buf.write("\2\2\2\u00cc\u00cd\7+\2\2\u00cd\66\3\2\2\2\u00ce\u00cf")
        buf.write("\7>\2\2\u00cf8\3\2\2\2\u00d0\u00d1\7@\2\2\u00d1:\3\2\2")
        buf.write("\2\u00d2\u00d3\7}\2\2\u00d3<\3\2\2\2\u00d4\u00d5\7\177")
        buf.write("\2\2\u00d5>\3\2\2\2\u00d6\u00d7\7]\2\2\u00d7@\3\2\2\2")
        buf.write("\u00d8\u00d9\7_\2\2\u00d9B\3\2\2\2\u00da\u00db\7$\2\2")
        buf.write("\u00dbD\3\2\2\2\u00dc\u00dd\t\2\2\2\u00ddF\3\2\2\2\u00de")
        buf.write("\u00df\7e\2\2\u00df\u00e0\7j\2\2\u00e0\u00e1\7c\2\2\u00e1")
        buf.write("\u00e2\7t\2\2\u00e2H\3\2\2\2\u00e3\u00e4\7h\2\2\u00e4")
        buf.write("\u00e5\7n\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7\7c\2\2\u00e7")
        buf.write("\u00e8\7v\2\2\u00e8J\3\2\2\2\u00e9\u00ea\7k\2\2\u00ea")
        buf.write("\u00eb\7p\2\2\u00eb\u00ec\7v\2\2\u00ecL\3\2\2\2\u00ed")
        buf.write("\u00ee\7x\2\2\u00ee\u00ef\7q\2\2\u00ef\u00f0\7k\2\2\u00f0")
        buf.write("\u00f1\7f\2\2\u00f1N\3\2\2\2\u00f2\u00f3\7e\2\2\u00f3")
        buf.write("\u00f4\7q\2\2\u00f4\u00f5\7p\2\2\u00f5\u00f6\7u\2\2\u00f6")
        buf.write("\u00f7\7v\2\2\u00f7P\3\2\2\2\u00f8\u00f9\7x\2\2\u00f9")
        buf.write("\u00fa\7q\2\2\u00fa\u00fb\7n\2\2\u00fb\u00fc\7c\2\2\u00fc")
        buf.write("\u00fd\7v\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7n\2\2\u00ff")
        buf.write("\u0100\7g\2\2\u0100R\3\2\2\2\u0101\u0102\7o\2\2\u0102")
        buf.write("\u0103\7w\2\2\u0103\u0104\7v\2\2\u0104\u0105\7c\2\2\u0105")
        buf.write("\u0106\7d\2\2\u0106\u0107\7n\2\2\u0107\u0108\7g\2\2\u0108")
        buf.write("T\3\2\2\2\u0109\u010a\7k\2\2\u010a\u010b\7h\2\2\u010b")
        buf.write("V\3\2\2\2\u010c\u010d\7g\2\2\u010d\u010e\7n\2\2\u010e")
        buf.write("\u010f\7u\2\2\u010f\u0110\7g\2\2\u0110X\3\2\2\2\u0111")
        buf.write("\u0112\7f\2\2\u0112\u0113\7q\2\2\u0113Z\3\2\2\2\u0114")
        buf.write("\u0115\7y\2\2\u0115\u0116\7j\2\2\u0116\u0117\7k\2\2\u0117")
        buf.write("\u0118\7n\2\2\u0118\u0119\7g\2\2\u0119\\\3\2\2\2\u011a")
        buf.write("\u011b\7h\2\2\u011b\u011c\7q\2\2\u011c\u011d\7t\2\2\u011d")
        buf.write("^\3\2\2\2\u011e\u011f\7d\2\2\u011f\u0120\7t\2\2\u0120")
        buf.write("\u0121\7g\2\2\u0121\u0122\7c\2\2\u0122\u0123\7m\2\2\u0123")
        buf.write("`\3\2\2\2\u0124\u0125\7e\2\2\u0125\u0126\7q\2\2\u0126")
        buf.write("\u0127\7p\2\2\u0127\u0128\7v\2\2\u0128\u0129\7k\2\2\u0129")
        buf.write("\u012a\7p\2\2\u012a\u012b\7w\2\2\u012b\u012c\7g\2\2\u012c")
        buf.write("b\3\2\2\2\u012d\u012e\7t\2\2\u012e\u012f\7g\2\2\u012f")
        buf.write("\u0130\7v\2\2\u0130\u0131\7w\2\2\u0131\u0132\7t\2\2\u0132")
        buf.write("\u0133\7p\2\2\u0133d\3\2\2\2\u0134\u0135\7\61\2\2\u0135")
        buf.write("\u0136\7\61\2\2\u0136\u013a\3\2\2\2\u0137\u0139\n\3\2")
        buf.write("\2\u0138\u0137\3\2\2\2\u0139\u013c\3\2\2\2\u013a\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d\3\2\2\2\u013c")
        buf.write("\u013a\3\2\2\2\u013d\u013e\b\63\2\2\u013ef\3\2\2\2\u013f")
        buf.write("\u0141\t\4\2\2\u0140\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143h\3\2\2")
        buf.write("\2\u0144\u0145\5g\64\2\u0145\u0146\7\60\2\2\u0146\u014c")
        buf.write("\5g\64\2\u0147\u0149\t\5\2\2\u0148\u014a\t\6\2\2\u0149")
        buf.write("\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2")
        buf.write("\u014b\u014d\5g\64\2\u014c\u0147\3\2\2\2\u014c\u014d\3")
        buf.write("\2\2\2\u014d\u0156\3\2\2\2\u014e\u014f\5g\64\2\u014f\u0151")
        buf.write("\t\5\2\2\u0150\u0152\t\6\2\2\u0151\u0150\3\2\2\2\u0151")
        buf.write("\u0152\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\5g\64\2")
        buf.write("\u0154\u0156\3\2\2\2\u0155\u0144\3\2\2\2\u0155\u014e\3")
        buf.write("\2\2\2\u0156j\3\2\2\2\u0157\u0159\t\7\2\2\u0158\u0157")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0158\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015bl\3\2\2\2\u015c\u015f\t\b\2\2\u015d")
        buf.write("\u0160\13\2\2\2\u015e\u0160\7\f\2\2\u015f\u015d\3\2\2")
        buf.write("\2\u015f\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162")
        buf.write("\t\b\2\2\u0162n\3\2\2\2\u0163\u0169\t\t\2\2\u0164\u0165")
        buf.write("\t\n\2\2\u0165\u0168\t\13\2\2\u0166\u0168\n\f\2\2\u0167")
        buf.write("\u0164\3\2\2\2\u0167\u0166\3\2\2\2\u0168\u016b\3\2\2\2")
        buf.write("\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3")
        buf.write("\2\2\2\u016b\u0169\3\2\2\2\u016c\u016d\t\t\2\2\u016dp")
        buf.write("\3\2\2\2\u016e\u0170\t\r\2\2\u016f\u016e\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2")
        buf.write("\u0172\u0173\3\2\2\2\u0173\u0174\b9\2\2\u0174r\3\2\2\2")
        buf.write("\16\2\u013a\u0142\u0149\u014c\u0151\u0155\u015a\u015f")
        buf.write("\u0167\u0169\u0171\3\b\2\2")
        return buf.getvalue()


class SmallCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    COMMA = 24
    LBRA = 25
    RBRA = 26
    LABRA = 27
    RABRA = 28
    LCBRA = 29
    RCBRA = 30
    LSBRA = 31
    RSBRA = 32
    QUOTE = 33
    OPERATOR = 34
    TYPECHAR = 35
    TYPEFLOAT = 36
    TYPEINT = 37
    TYPEVOID = 38
    CONST = 39
    VOLATILE = 40
    MUTABLE = 41
    IF = 42
    ELSE = 43
    DO = 44
    WHILE = 45
    FOR = 46
    BREAK = 47
    CONTINUE = 48
    RETURN = 49
    COMMENT = 50
    INTEGER = 51
    FLOAT = 52
    IDENTIFIER = 53
    CHARACTER = 54
    STRING = 55
    WS = 56

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'?'", "':'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
            "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'&'", 
            "'!'", "'#include'", "'.'", "';'", "'main'", "'int argc, char *argv[]'", 
            "','", "'('", "')'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
            "'\"'", "'char'", "'float'", "'int'", "'void'", "'const'", "'volatile'", 
            "'mutable'", "'if'", "'else'", "'do'", "'while'", "'for'", "'break'", 
            "'continue'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", "LCBRA", "RCBRA", 
            "LSBRA", "RSBRA", "QUOTE", "OPERATOR", "TYPECHAR", "TYPEFLOAT", 
            "TYPEINT", "TYPEVOID", "CONST", "VOLATILE", "MUTABLE", "IF", 
            "ELSE", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", 
            "COMMENT", "INTEGER", "FLOAT", "IDENTIFIER", "CHARACTER", "STRING", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "COMMA", "LBRA", "RBRA", "LABRA", 
                  "RABRA", "LCBRA", "RCBRA", "LSBRA", "RSBRA", "QUOTE", 
                  "OPERATOR", "TYPECHAR", "TYPEFLOAT", "TYPEINT", "TYPEVOID", 
                  "CONST", "VOLATILE", "MUTABLE", "IF", "ELSE", "DO", "WHILE", 
                  "FOR", "BREAK", "CONTINUE", "RETURN", "COMMENT", "INTEGER", 
                  "FLOAT", "IDENTIFIER", "CHARACTER", "STRING", "WS" ]

    grammarFileName = "SmallC.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


