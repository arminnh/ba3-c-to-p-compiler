# Generated from SmallC.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2;")
        buf.write("\u0185\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3")
        buf.write("\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3")
        buf.write("\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#")
        buf.write("\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)")
        buf.write("\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3,\3,\3,\3,\3")
        buf.write(",\3-\3-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63")
        buf.write("\3\63\7\63\u013b\n\63\f\63\16\63\u013e\13\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u0146\n\64\f\64\16\64\u0149")
        buf.write("\13\64\3\64\3\64\3\64\3\64\3\64\3\65\6\65\u0151\n\65\r")
        buf.write("\65\16\65\u0152\3\66\3\66\3\66\3\66\3\66\5\66\u015a\n")
        buf.write("\66\3\66\5\66\u015d\n\66\3\66\3\66\3\66\5\66\u0162\n\66")
        buf.write("\3\66\3\66\5\66\u0166\n\66\3\67\6\67\u0169\n\67\r\67\16")
        buf.write("\67\u016a\38\38\38\58\u0170\n8\38\38\39\39\39\39\79\u0178")
        buf.write("\n9\f9\169\u017b\139\39\39\3:\6:\u0180\n:\r:\16:\u0181")
        buf.write("\3:\3:\3\u0147\2;\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65")
        buf.write("i\66k\67m8o9q:s;\3\2\16\4\2\'\'\61\61\4\2\f\f\17\17\3")
        buf.write("\2\62;\4\2GGgg\4\2--//\5\2\62;C\\c|\3\2))\3\2$$\3\2^^")
        buf.write("\6\2$$^^pptt\6\2\f\f\17\17$$^^\5\2\13\f\17\17\"\"\u0190")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3")
        buf.write("\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q")
        buf.write("\3\2\2\2\2s\3\2\2\2\3u\3\2\2\2\5w\3\2\2\2\7y\3\2\2\2\t")
        buf.write("{\3\2\2\2\13~\3\2\2\2\r\u0081\3\2\2\2\17\u0084\3\2\2\2")
        buf.write("\21\u0087\3\2\2\2\23\u008a\3\2\2\2\25\u008d\3\2\2\2\27")
        buf.write("\u008f\3\2\2\2\31\u0091\3\2\2\2\33\u0093\3\2\2\2\35\u0095")
        buf.write("\3\2\2\2\37\u0097\3\2\2\2!\u009a\3\2\2\2#\u009d\3\2\2")
        buf.write("\2%\u009f\3\2\2\2\'\u00a1\3\2\2\2)\u00a3\3\2\2\2+\u00ac")
        buf.write("\3\2\2\2-\u00ae\3\2\2\2/\u00b3\3\2\2\2\61\u00ca\3\2\2")
        buf.write("\2\63\u00cc\3\2\2\2\65\u00ce\3\2\2\2\67\u00d0\3\2\2\2")
        buf.write("9\u00d2\3\2\2\2;\u00d4\3\2\2\2=\u00d6\3\2\2\2?\u00d8\3")
        buf.write("\2\2\2A\u00da\3\2\2\2C\u00dc\3\2\2\2E\u00de\3\2\2\2G\u00e0")
        buf.write("\3\2\2\2I\u00e5\3\2\2\2K\u00eb\3\2\2\2M\u00ef\3\2\2\2")
        buf.write("O\u00f4\3\2\2\2Q\u00fa\3\2\2\2S\u0103\3\2\2\2U\u010b\3")
        buf.write("\2\2\2W\u010e\3\2\2\2Y\u0113\3\2\2\2[\u0116\3\2\2\2]\u011c")
        buf.write("\3\2\2\2_\u0120\3\2\2\2a\u0126\3\2\2\2c\u012f\3\2\2\2")
        buf.write("e\u0136\3\2\2\2g\u0141\3\2\2\2i\u0150\3\2\2\2k\u0165\3")
        buf.write("\2\2\2m\u0168\3\2\2\2o\u016c\3\2\2\2q\u0173\3\2\2\2s\u017f")
        buf.write("\3\2\2\2uv\7?\2\2v\4\3\2\2\2wx\7A\2\2x\6\3\2\2\2yz\7<")
        buf.write("\2\2z\b\3\2\2\2{|\7~\2\2|}\7~\2\2}\n\3\2\2\2~\177\7(\2")
        buf.write("\2\177\u0080\7(\2\2\u0080\f\3\2\2\2\u0081\u0082\7?\2\2")
        buf.write("\u0082\u0083\7?\2\2\u0083\16\3\2\2\2\u0084\u0085\7#\2")
        buf.write("\2\u0085\u0086\7?\2\2\u0086\20\3\2\2\2\u0087\u0088\7>")
        buf.write("\2\2\u0088\u0089\7?\2\2\u0089\22\3\2\2\2\u008a\u008b\7")
        buf.write("@\2\2\u008b\u008c\7?\2\2\u008c\24\3\2\2\2\u008d\u008e")
        buf.write("\7-\2\2\u008e\26\3\2\2\2\u008f\u0090\7/\2\2\u0090\30\3")
        buf.write("\2\2\2\u0091\u0092\7,\2\2\u0092\32\3\2\2\2\u0093\u0094")
        buf.write("\7\61\2\2\u0094\34\3\2\2\2\u0095\u0096\7\'\2\2\u0096\36")
        buf.write("\3\2\2\2\u0097\u0098\7-\2\2\u0098\u0099\7-\2\2\u0099 ")
        buf.write("\3\2\2\2\u009a\u009b\7/\2\2\u009b\u009c\7/\2\2\u009c\"")
        buf.write("\3\2\2\2\u009d\u009e\7(\2\2\u009e$\3\2\2\2\u009f\u00a0")
        buf.write("\7#\2\2\u00a0&\3\2\2\2\u00a1\u00a2\7=\2\2\u00a2(\3\2\2")
        buf.write("\2\u00a3\u00a4\7%\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6\7")
        buf.write("p\2\2\u00a6\u00a7\7e\2\2\u00a7\u00a8\7n\2\2\u00a8\u00a9")
        buf.write("\7w\2\2\u00a9\u00aa\7f\2\2\u00aa\u00ab\7g\2\2\u00ab*\3")
        buf.write("\2\2\2\u00ac\u00ad\7\60\2\2\u00ad,\3\2\2\2\u00ae\u00af")
        buf.write("\7o\2\2\u00af\u00b0\7c\2\2\u00b0\u00b1\7k\2\2\u00b1\u00b2")
        buf.write("\7p\2\2\u00b2.\3\2\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5")
        buf.write("\7p\2\2\u00b5\u00b6\7v\2\2\u00b6\u00b7\7\"\2\2\u00b7\u00b8")
        buf.write("\7c\2\2\u00b8\u00b9\7t\2\2\u00b9\u00ba\7i\2\2\u00ba\u00bb")
        buf.write("\7e\2\2\u00bb\u00bc\7.\2\2\u00bc\u00bd\7\"\2\2\u00bd\u00be")
        buf.write("\7e\2\2\u00be\u00bf\7j\2\2\u00bf\u00c0\7c\2\2\u00c0\u00c1")
        buf.write("\7t\2\2\u00c1\u00c2\7\"\2\2\u00c2\u00c3\7,\2\2\u00c3\u00c4")
        buf.write("\7c\2\2\u00c4\u00c5\7t\2\2\u00c5\u00c6\7i\2\2\u00c6\u00c7")
        buf.write("\7x\2\2\u00c7\u00c8\7]\2\2\u00c8\u00c9\7_\2\2\u00c9\60")
        buf.write("\3\2\2\2\u00ca\u00cb\7.\2\2\u00cb\62\3\2\2\2\u00cc\u00cd")
        buf.write("\7*\2\2\u00cd\64\3\2\2\2\u00ce\u00cf\7+\2\2\u00cf\66\3")
        buf.write("\2\2\2\u00d0\u00d1\7>\2\2\u00d18\3\2\2\2\u00d2\u00d3\7")
        buf.write("@\2\2\u00d3:\3\2\2\2\u00d4\u00d5\7}\2\2\u00d5<\3\2\2\2")
        buf.write("\u00d6\u00d7\7\177\2\2\u00d7>\3\2\2\2\u00d8\u00d9\7]\2")
        buf.write("\2\u00d9@\3\2\2\2\u00da\u00db\7_\2\2\u00dbB\3\2\2\2\u00dc")
        buf.write("\u00dd\7$\2\2\u00ddD\3\2\2\2\u00de\u00df\t\2\2\2\u00df")
        buf.write("F\3\2\2\2\u00e0\u00e1\7e\2\2\u00e1\u00e2\7j\2\2\u00e2")
        buf.write("\u00e3\7c\2\2\u00e3\u00e4\7t\2\2\u00e4H\3\2\2\2\u00e5")
        buf.write("\u00e6\7h\2\2\u00e6\u00e7\7n\2\2\u00e7\u00e8\7q\2\2\u00e8")
        buf.write("\u00e9\7c\2\2\u00e9\u00ea\7v\2\2\u00eaJ\3\2\2\2\u00eb")
        buf.write("\u00ec\7k\2\2\u00ec\u00ed\7p\2\2\u00ed\u00ee\7v\2\2\u00ee")
        buf.write("L\3\2\2\2\u00ef\u00f0\7x\2\2\u00f0\u00f1\7q\2\2\u00f1")
        buf.write("\u00f2\7k\2\2\u00f2\u00f3\7f\2\2\u00f3N\3\2\2\2\u00f4")
        buf.write("\u00f5\7e\2\2\u00f5\u00f6\7q\2\2\u00f6\u00f7\7p\2\2\u00f7")
        buf.write("\u00f8\7u\2\2\u00f8\u00f9\7v\2\2\u00f9P\3\2\2\2\u00fa")
        buf.write("\u00fb\7x\2\2\u00fb\u00fc\7q\2\2\u00fc\u00fd\7n\2\2\u00fd")
        buf.write("\u00fe\7c\2\2\u00fe\u00ff\7v\2\2\u00ff\u0100\7k\2\2\u0100")
        buf.write("\u0101\7n\2\2\u0101\u0102\7g\2\2\u0102R\3\2\2\2\u0103")
        buf.write("\u0104\7o\2\2\u0104\u0105\7w\2\2\u0105\u0106\7v\2\2\u0106")
        buf.write("\u0107\7c\2\2\u0107\u0108\7d\2\2\u0108\u0109\7n\2\2\u0109")
        buf.write("\u010a\7g\2\2\u010aT\3\2\2\2\u010b\u010c\7k\2\2\u010c")
        buf.write("\u010d\7h\2\2\u010dV\3\2\2\2\u010e\u010f\7g\2\2\u010f")
        buf.write("\u0110\7n\2\2\u0110\u0111\7u\2\2\u0111\u0112\7g\2\2\u0112")
        buf.write("X\3\2\2\2\u0113\u0114\7f\2\2\u0114\u0115\7q\2\2\u0115")
        buf.write("Z\3\2\2\2\u0116\u0117\7y\2\2\u0117\u0118\7j\2\2\u0118")
        buf.write("\u0119\7k\2\2\u0119\u011a\7n\2\2\u011a\u011b\7g\2\2\u011b")
        buf.write("\\\3\2\2\2\u011c\u011d\7h\2\2\u011d\u011e\7q\2\2\u011e")
        buf.write("\u011f\7t\2\2\u011f^\3\2\2\2\u0120\u0121\7d\2\2\u0121")
        buf.write("\u0122\7t\2\2\u0122\u0123\7g\2\2\u0123\u0124\7c\2\2\u0124")
        buf.write("\u0125\7m\2\2\u0125`\3\2\2\2\u0126\u0127\7e\2\2\u0127")
        buf.write("\u0128\7q\2\2\u0128\u0129\7p\2\2\u0129\u012a\7v\2\2\u012a")
        buf.write("\u012b\7k\2\2\u012b\u012c\7p\2\2\u012c\u012d\7w\2\2\u012d")
        buf.write("\u012e\7g\2\2\u012eb\3\2\2\2\u012f\u0130\7t\2\2\u0130")
        buf.write("\u0131\7g\2\2\u0131\u0132\7v\2\2\u0132\u0133\7w\2\2\u0133")
        buf.write("\u0134\7t\2\2\u0134\u0135\7p\2\2\u0135d\3\2\2\2\u0136")
        buf.write("\u0137\7\61\2\2\u0137\u0138\7\61\2\2\u0138\u013c\3\2\2")
        buf.write("\2\u0139\u013b\n\3\2\2\u013a\u0139\3\2\2\2\u013b\u013e")
        buf.write("\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write("\u013f\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0140\b\63\2")
        buf.write("\2\u0140f\3\2\2\2\u0141\u0142\7\61\2\2\u0142\u0143\7,")
        buf.write("\2\2\u0143\u0147\3\2\2\2\u0144\u0146\13\2\2\2\u0145\u0144")
        buf.write("\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0148\3\2\2\2\u0147")
        buf.write("\u0145\3\2\2\2\u0148\u014a\3\2\2\2\u0149\u0147\3\2\2\2")
        buf.write("\u014a\u014b\7,\2\2\u014b\u014c\7\61\2\2\u014c\u014d\3")
        buf.write("\2\2\2\u014d\u014e\b\64\2\2\u014eh\3\2\2\2\u014f\u0151")
        buf.write("\t\4\2\2\u0150\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153j\3\2\2\2\u0154")
        buf.write("\u0155\5i\65\2\u0155\u0156\7\60\2\2\u0156\u015c\5i\65")
        buf.write("\2\u0157\u0159\t\5\2\2\u0158\u015a\t\6\2\2\u0159\u0158")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2\u015b")
        buf.write("\u015d\5i\65\2\u015c\u0157\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\u0166\3\2\2\2\u015e\u015f\5i\65\2\u015f\u0161\t")
        buf.write("\5\2\2\u0160\u0162\t\6\2\2\u0161\u0160\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\5i\65\2\u0164")
        buf.write("\u0166\3\2\2\2\u0165\u0154\3\2\2\2\u0165\u015e\3\2\2\2")
        buf.write("\u0166l\3\2\2\2\u0167\u0169\t\7\2\2\u0168\u0167\3\2\2")
        buf.write("\2\u0169\u016a\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016bn\3\2\2\2\u016c\u016f\t\b\2\2\u016d\u0170")
        buf.write("\13\2\2\2\u016e\u0170\7\f\2\2\u016f\u016d\3\2\2\2\u016f")
        buf.write("\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\t\b\2\2")
        buf.write("\u0172p\3\2\2\2\u0173\u0179\t\t\2\2\u0174\u0175\t\n\2")
        buf.write("\2\u0175\u0178\t\13\2\2\u0176\u0178\n\f\2\2\u0177\u0174")
        buf.write("\3\2\2\2\u0177\u0176\3\2\2\2\u0178\u017b\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017c\3\2\2\2")
        buf.write("\u017b\u0179\3\2\2\2\u017c\u017d\t\t\2\2\u017dr\3\2\2")
        buf.write("\2\u017e\u0180\t\r\2\2\u017f\u017e\3\2\2\2\u0180\u0181")
        buf.write("\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183\u0184\b:\2\2\u0184t\3\2\2\2\17\2")
        buf.write("\u013c\u0147\u0152\u0159\u015c\u0161\u0165\u016a\u016f")
        buf.write("\u0177\u0179\u0181\3\b\2\2")
        return buf.getvalue()


class SmallCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    COMMA = 24
    LBRA = 25
    RBRA = 26
    LABRA = 27
    RABRA = 28
    LCBRA = 29
    RCBRA = 30
    LSBRA = 31
    RSBRA = 32
    QUOTE = 33
    OPERATOR = 34
    TYPECHAR = 35
    TYPEFLOAT = 36
    TYPEINT = 37
    TYPEVOID = 38
    CONST = 39
    VOLATILE = 40
    MUTABLE = 41
    IF = 42
    ELSE = 43
    DO = 44
    WHILE = 45
    FOR = 46
    BREAK = 47
    CONTINUE = 48
    RETURN = 49
    COMMENT = 50
    MULTICOMMENT = 51
    INTEGER = 52
    FLOAT = 53
    IDENTIFIER = 54
    CHARACTER = 55
    STRING = 56
    WS = 57

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'?'", "':'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
            "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'&'", 
            "'!'", "';'", "'#include'", "'.'", "'main'", "'int argc, char *argv[]'", 
            "','", "'('", "')'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
            "'\"'", "'char'", "'float'", "'int'", "'void'", "'const'", "'volatile'", 
            "'mutable'", "'if'", "'else'", "'do'", "'while'", "'for'", "'break'", 
            "'continue'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", "LCBRA", "RCBRA", 
            "LSBRA", "RSBRA", "QUOTE", "OPERATOR", "TYPECHAR", "TYPEFLOAT", 
            "TYPEINT", "TYPEVOID", "CONST", "VOLATILE", "MUTABLE", "IF", 
            "ELSE", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", 
            "COMMENT", "MULTICOMMENT", "INTEGER", "FLOAT", "IDENTIFIER", 
            "CHARACTER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "COMMA", "LBRA", "RBRA", "LABRA", 
                  "RABRA", "LCBRA", "RCBRA", "LSBRA", "RSBRA", "QUOTE", 
                  "OPERATOR", "TYPECHAR", "TYPEFLOAT", "TYPEINT", "TYPEVOID", 
                  "CONST", "VOLATILE", "MUTABLE", "IF", "ELSE", "DO", "WHILE", 
                  "FOR", "BREAK", "CONTINUE", "RETURN", "COMMENT", "MULTICOMMENT", 
                  "INTEGER", "FLOAT", "IDENTIFIER", "CHARACTER", "STRING", 
                  "WS" ]

    grammarFileName = "SmallC.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


