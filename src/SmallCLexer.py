# Generated from SmallC.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2:")
        buf.write("\u0181\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\3\2\3")
        buf.write("\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3")
        buf.write("#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3,\3,\3,\3,\3,\3")
        buf.write(",\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\62\3\62\3\62\3\62\7\62\u0137\n\62\f\62\16")
        buf.write("\62\u013a\13\62\3\62\3\62\3\63\3\63\3\63\3\63\7\63\u0142")
        buf.write("\n\63\f\63\16\63\u0145\13\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\64\6\64\u014d\n\64\r\64\16\64\u014e\3\65\3\65\3\65")
        buf.write("\3\65\3\65\5\65\u0156\n\65\3\65\5\65\u0159\n\65\3\65\3")
        buf.write("\65\3\65\5\65\u015e\n\65\3\65\3\65\5\65\u0162\n\65\3\66")
        buf.write("\6\66\u0165\n\66\r\66\16\66\u0166\3\67\3\67\3\67\5\67")
        buf.write("\u016c\n\67\3\67\3\67\38\38\38\38\78\u0174\n8\f8\168\u0177")
        buf.write("\138\38\38\39\69\u017c\n9\r9\169\u017d\39\39\3\u0143\2")
        buf.write(":\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:\3")
        buf.write("\2\r\4\2\f\f\17\17\3\2\62;\4\2GGgg\4\2--//\5\2\62;C\\")
        buf.write("c|\3\2))\3\2$$\3\2^^\6\2$$^^pptt\6\2\f\f\17\17$$^^\5\2")
        buf.write("\13\f\17\17\"\"\u018c\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2")
        buf.write("\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2")
        buf.write("\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2")
        buf.write("\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!")
        buf.write("\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2")
        buf.write("\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3")
        buf.write("\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2")
        buf.write("\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2")
        buf.write("\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2")
        buf.write("\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3")
        buf.write("\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c")
        buf.write("\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2")
        buf.write("m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\3s\3\2\2\2\5u\3\2\2\2")
        buf.write("\7w\3\2\2\2\ty\3\2\2\2\13|\3\2\2\2\r\177\3\2\2\2\17\u0082")
        buf.write("\3\2\2\2\21\u0085\3\2\2\2\23\u0088\3\2\2\2\25\u008b\3")
        buf.write("\2\2\2\27\u008d\3\2\2\2\31\u008f\3\2\2\2\33\u0091\3\2")
        buf.write("\2\2\35\u0093\3\2\2\2\37\u0095\3\2\2\2!\u0098\3\2\2\2")
        buf.write("#\u009b\3\2\2\2%\u009d\3\2\2\2\'\u009f\3\2\2\2)\u00a1")
        buf.write("\3\2\2\2+\u00aa\3\2\2\2-\u00ac\3\2\2\2/\u00c3\3\2\2\2")
        buf.write("\61\u00c5\3\2\2\2\63\u00c7\3\2\2\2\65\u00c9\3\2\2\2\67")
        buf.write("\u00cb\3\2\2\29\u00cd\3\2\2\2;\u00cf\3\2\2\2=\u00d1\3")
        buf.write("\2\2\2?\u00d3\3\2\2\2A\u00d5\3\2\2\2C\u00d7\3\2\2\2E\u00dc")
        buf.write("\3\2\2\2G\u00e2\3\2\2\2I\u00e6\3\2\2\2K\u00eb\3\2\2\2")
        buf.write("M\u00f1\3\2\2\2O\u00fa\3\2\2\2Q\u0102\3\2\2\2S\u0105\3")
        buf.write("\2\2\2U\u010a\3\2\2\2W\u010d\3\2\2\2Y\u0113\3\2\2\2[\u0117")
        buf.write("\3\2\2\2]\u011d\3\2\2\2_\u0126\3\2\2\2a\u012d\3\2\2\2")
        buf.write("c\u0132\3\2\2\2e\u013d\3\2\2\2g\u014c\3\2\2\2i\u0161\3")
        buf.write("\2\2\2k\u0164\3\2\2\2m\u0168\3\2\2\2o\u016f\3\2\2\2q\u017b")
        buf.write("\3\2\2\2st\7?\2\2t\4\3\2\2\2uv\7A\2\2v\6\3\2\2\2wx\7<")
        buf.write("\2\2x\b\3\2\2\2yz\7~\2\2z{\7~\2\2{\n\3\2\2\2|}\7(\2\2")
        buf.write("}~\7(\2\2~\f\3\2\2\2\177\u0080\7?\2\2\u0080\u0081\7?\2")
        buf.write("\2\u0081\16\3\2\2\2\u0082\u0083\7#\2\2\u0083\u0084\7?")
        buf.write("\2\2\u0084\20\3\2\2\2\u0085\u0086\7>\2\2\u0086\u0087\7")
        buf.write("?\2\2\u0087\22\3\2\2\2\u0088\u0089\7@\2\2\u0089\u008a")
        buf.write("\7?\2\2\u008a\24\3\2\2\2\u008b\u008c\7-\2\2\u008c\26\3")
        buf.write("\2\2\2\u008d\u008e\7/\2\2\u008e\30\3\2\2\2\u008f\u0090")
        buf.write("\7,\2\2\u0090\32\3\2\2\2\u0091\u0092\7\61\2\2\u0092\34")
        buf.write("\3\2\2\2\u0093\u0094\7\'\2\2\u0094\36\3\2\2\2\u0095\u0096")
        buf.write("\7-\2\2\u0096\u0097\7-\2\2\u0097 \3\2\2\2\u0098\u0099")
        buf.write("\7/\2\2\u0099\u009a\7/\2\2\u009a\"\3\2\2\2\u009b\u009c")
        buf.write("\7(\2\2\u009c$\3\2\2\2\u009d\u009e\7#\2\2\u009e&\3\2\2")
        buf.write("\2\u009f\u00a0\7=\2\2\u00a0(\3\2\2\2\u00a1\u00a2\7%\2")
        buf.write("\2\u00a2\u00a3\7k\2\2\u00a3\u00a4\7p\2\2\u00a4\u00a5\7")
        buf.write("e\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7\7w\2\2\u00a7\u00a8")
        buf.write("\7f\2\2\u00a8\u00a9\7g\2\2\u00a9*\3\2\2\2\u00aa\u00ab")
        buf.write("\7\60\2\2\u00ab,\3\2\2\2\u00ac\u00ad\7k\2\2\u00ad\u00ae")
        buf.write("\7p\2\2\u00ae\u00af\7v\2\2\u00af\u00b0\7\"\2\2\u00b0\u00b1")
        buf.write("\7c\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3\7i\2\2\u00b3\u00b4")
        buf.write("\7e\2\2\u00b4\u00b5\7.\2\2\u00b5\u00b6\7\"\2\2\u00b6\u00b7")
        buf.write("\7e\2\2\u00b7\u00b8\7j\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba")
        buf.write("\7t\2\2\u00ba\u00bb\7\"\2\2\u00bb\u00bc\7,\2\2\u00bc\u00bd")
        buf.write("\7c\2\2\u00bd\u00be\7t\2\2\u00be\u00bf\7i\2\2\u00bf\u00c0")
        buf.write("\7x\2\2\u00c0\u00c1\7]\2\2\u00c1\u00c2\7_\2\2\u00c2.\3")
        buf.write("\2\2\2\u00c3\u00c4\7.\2\2\u00c4\60\3\2\2\2\u00c5\u00c6")
        buf.write("\7*\2\2\u00c6\62\3\2\2\2\u00c7\u00c8\7+\2\2\u00c8\64\3")
        buf.write("\2\2\2\u00c9\u00ca\7>\2\2\u00ca\66\3\2\2\2\u00cb\u00cc")
        buf.write("\7@\2\2\u00cc8\3\2\2\2\u00cd\u00ce\7}\2\2\u00ce:\3\2\2")
        buf.write("\2\u00cf\u00d0\7\177\2\2\u00d0<\3\2\2\2\u00d1\u00d2\7")
        buf.write("]\2\2\u00d2>\3\2\2\2\u00d3\u00d4\7_\2\2\u00d4@\3\2\2\2")
        buf.write("\u00d5\u00d6\7$\2\2\u00d6B\3\2\2\2\u00d7\u00d8\7e\2\2")
        buf.write("\u00d8\u00d9\7j\2\2\u00d9\u00da\7c\2\2\u00da\u00db\7t")
        buf.write("\2\2\u00dbD\3\2\2\2\u00dc\u00dd\7h\2\2\u00dd\u00de\7n")
        buf.write("\2\2\u00de\u00df\7q\2\2\u00df\u00e0\7c\2\2\u00e0\u00e1")
        buf.write("\7v\2\2\u00e1F\3\2\2\2\u00e2\u00e3\7k\2\2\u00e3\u00e4")
        buf.write("\7p\2\2\u00e4\u00e5\7v\2\2\u00e5H\3\2\2\2\u00e6\u00e7")
        buf.write("\7x\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9\7k\2\2\u00e9\u00ea")
        buf.write("\7f\2\2\u00eaJ\3\2\2\2\u00eb\u00ec\7e\2\2\u00ec\u00ed")
        buf.write("\7q\2\2\u00ed\u00ee\7p\2\2\u00ee\u00ef\7u\2\2\u00ef\u00f0")
        buf.write("\7v\2\2\u00f0L\3\2\2\2\u00f1\u00f2\7x\2\2\u00f2\u00f3")
        buf.write("\7q\2\2\u00f3\u00f4\7n\2\2\u00f4\u00f5\7c\2\2\u00f5\u00f6")
        buf.write("\7v\2\2\u00f6\u00f7\7k\2\2\u00f7\u00f8\7n\2\2\u00f8\u00f9")
        buf.write("\7g\2\2\u00f9N\3\2\2\2\u00fa\u00fb\7o\2\2\u00fb\u00fc")
        buf.write("\7w\2\2\u00fc\u00fd\7v\2\2\u00fd\u00fe\7c\2\2\u00fe\u00ff")
        buf.write("\7d\2\2\u00ff\u0100\7n\2\2\u0100\u0101\7g\2\2\u0101P\3")
        buf.write("\2\2\2\u0102\u0103\7k\2\2\u0103\u0104\7h\2\2\u0104R\3")
        buf.write("\2\2\2\u0105\u0106\7g\2\2\u0106\u0107\7n\2\2\u0107\u0108")
        buf.write("\7u\2\2\u0108\u0109\7g\2\2\u0109T\3\2\2\2\u010a\u010b")
        buf.write("\7f\2\2\u010b\u010c\7q\2\2\u010cV\3\2\2\2\u010d\u010e")
        buf.write("\7y\2\2\u010e\u010f\7j\2\2\u010f\u0110\7k\2\2\u0110\u0111")
        buf.write("\7n\2\2\u0111\u0112\7g\2\2\u0112X\3\2\2\2\u0113\u0114")
        buf.write("\7h\2\2\u0114\u0115\7q\2\2\u0115\u0116\7t\2\2\u0116Z\3")
        buf.write("\2\2\2\u0117\u0118\7d\2\2\u0118\u0119\7t\2\2\u0119\u011a")
        buf.write("\7g\2\2\u011a\u011b\7c\2\2\u011b\u011c\7m\2\2\u011c\\")
        buf.write("\3\2\2\2\u011d\u011e\7e\2\2\u011e\u011f\7q\2\2\u011f\u0120")
        buf.write("\7p\2\2\u0120\u0121\7v\2\2\u0121\u0122\7k\2\2\u0122\u0123")
        buf.write("\7p\2\2\u0123\u0124\7w\2\2\u0124\u0125\7g\2\2\u0125^\3")
        buf.write("\2\2\2\u0126\u0127\7t\2\2\u0127\u0128\7g\2\2\u0128\u0129")
        buf.write("\7v\2\2\u0129\u012a\7w\2\2\u012a\u012b\7t\2\2\u012b\u012c")
        buf.write("\7p\2\2\u012c`\3\2\2\2\u012d\u012e\7o\2\2\u012e\u012f")
        buf.write("\7c\2\2\u012f\u0130\7k\2\2\u0130\u0131\7p\2\2\u0131b\3")
        buf.write("\2\2\2\u0132\u0133\7\61\2\2\u0133\u0134\7\61\2\2\u0134")
        buf.write("\u0138\3\2\2\2\u0135\u0137\n\2\2\2\u0136\u0135\3\2\2\2")
        buf.write("\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3")
        buf.write("\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138\3\2\2\2\u013b\u013c")
        buf.write("\b\62\2\2\u013cd\3\2\2\2\u013d\u013e\7\61\2\2\u013e\u013f")
        buf.write("\7,\2\2\u013f\u0143\3\2\2\2\u0140\u0142\13\2\2\2\u0141")
        buf.write("\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0144\3\2\2\2")
        buf.write("\u0143\u0141\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0146\u0147\7,\2\2\u0147\u0148\7\61\2\2\u0148\u0149")
        buf.write("\3\2\2\2\u0149\u014a\b\63\2\2\u014af\3\2\2\2\u014b\u014d")
        buf.write("\t\3\2\2\u014c\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014fh\3\2\2\2\u0150")
        buf.write("\u0151\5g\64\2\u0151\u0152\7\60\2\2\u0152\u0158\5g\64")
        buf.write("\2\u0153\u0155\t\4\2\2\u0154\u0156\t\5\2\2\u0155\u0154")
        buf.write("\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157")
        buf.write("\u0159\5g\64\2\u0158\u0153\3\2\2\2\u0158\u0159\3\2\2\2")
        buf.write("\u0159\u0162\3\2\2\2\u015a\u015b\5g\64\2\u015b\u015d\t")
        buf.write("\4\2\2\u015c\u015e\t\5\2\2\u015d\u015c\3\2\2\2\u015d\u015e")
        buf.write("\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160\5g\64\2\u0160")
        buf.write("\u0162\3\2\2\2\u0161\u0150\3\2\2\2\u0161\u015a\3\2\2\2")
        buf.write("\u0162j\3\2\2\2\u0163\u0165\t\6\2\2\u0164\u0163\3\2\2")
        buf.write("\2\u0165\u0166\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167")
        buf.write("\3\2\2\2\u0167l\3\2\2\2\u0168\u016b\t\7\2\2\u0169\u016c")
        buf.write("\13\2\2\2\u016a\u016c\7\f\2\2\u016b\u0169\3\2\2\2\u016b")
        buf.write("\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016e\t\7\2\2")
        buf.write("\u016en\3\2\2\2\u016f\u0175\t\b\2\2\u0170\u0171\t\t\2")
        buf.write("\2\u0171\u0174\t\n\2\2\u0172\u0174\n\13\2\2\u0173\u0170")
        buf.write("\3\2\2\2\u0173\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\3\2\2\2")
        buf.write("\u0177\u0175\3\2\2\2\u0178\u0179\t\b\2\2\u0179p\3\2\2")
        buf.write("\2\u017a\u017c\t\f\2\2\u017b\u017a\3\2\2\2\u017c\u017d")
        buf.write("\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u017f\3\2\2\2\u017f\u0180\b9\2\2\u0180r\3\2\2\2\17\2")
        buf.write("\u0138\u0143\u014e\u0155\u0158\u015d\u0161\u0166\u016b")
        buf.write("\u0173\u0175\u017d\3\b\2\2")
        return buf.getvalue()


class SmallCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    COMMA = 23
    LBRA = 24
    RBRA = 25
    LABRA = 26
    RABRA = 27
    LCBRA = 28
    RCBRA = 29
    LSBRA = 30
    RSBRA = 31
    QUOTE = 32
    TYPECHAR = 33
    TYPEFLOAT = 34
    TYPEINT = 35
    TYPEVOID = 36
    CONST = 37
    VOLATILE = 38
    MUTABLE = 39
    IF = 40
    ELSE = 41
    DO = 42
    WHILE = 43
    FOR = 44
    BREAK = 45
    CONTINUE = 46
    RETURN = 47
    MAIN = 48
    COMMENT = 49
    MULTICOMMENT = 50
    INTEGER = 51
    FLOAT = 52
    IDENTIFIER = 53
    CHARACTER = 54
    STRING = 55
    WS = 56

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'?'", "':'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
            "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'&'", 
            "'!'", "';'", "'#include'", "'.'", "'int argc, char *argv[]'", 
            "','", "'('", "')'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
            "'\"'", "'char'", "'float'", "'int'", "'void'", "'const'", "'volatile'", 
            "'mutable'", "'if'", "'else'", "'do'", "'while'", "'for'", "'break'", 
            "'continue'", "'return'", "'main'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", "LCBRA", "RCBRA", 
            "LSBRA", "RSBRA", "QUOTE", "TYPECHAR", "TYPEFLOAT", "TYPEINT", 
            "TYPEVOID", "CONST", "VOLATILE", "MUTABLE", "IF", "ELSE", "DO", 
            "WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", "MAIN", "COMMENT", 
            "MULTICOMMENT", "INTEGER", "FLOAT", "IDENTIFIER", "CHARACTER", 
            "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", 
                  "LCBRA", "RCBRA", "LSBRA", "RSBRA", "QUOTE", "TYPECHAR", 
                  "TYPEFLOAT", "TYPEINT", "TYPEVOID", "CONST", "VOLATILE", 
                  "MUTABLE", "IF", "ELSE", "DO", "WHILE", "FOR", "BREAK", 
                  "CONTINUE", "RETURN", "MAIN", "COMMENT", "MULTICOMMENT", 
                  "INTEGER", "FLOAT", "IDENTIFIER", "CHARACTER", "STRING", 
                  "WS" ]

    grammarFileName = "SmallC.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


