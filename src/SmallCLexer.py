# Generated from SmallC.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\28")
        buf.write("\u0163\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3")
        buf.write("#\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3")
        buf.write(")\3)\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3")
        buf.write("-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3\60\3\60\3\60\3\60\7\60\u0117\n\60\f\60\16")
        buf.write("\60\u011a\13\60\3\60\3\60\3\61\3\61\3\61\3\61\7\61\u0122")
        buf.write("\n\61\f\61\16\61\u0125\13\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\62\6\62\u012d\n\62\r\62\16\62\u012e\3\63\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u0136\n\63\3\63\5\63\u0139\n\63\3\63\3")
        buf.write("\63\3\63\5\63\u013e\n\63\3\63\3\63\5\63\u0142\n\63\3\64")
        buf.write("\3\64\7\64\u0146\n\64\f\64\16\64\u0149\13\64\3\65\3\65")
        buf.write("\3\65\5\65\u014e\n\65\3\65\3\65\3\66\3\66\3\66\3\66\7")
        buf.write("\66\u0156\n\66\f\66\16\66\u0159\13\66\3\66\3\66\3\67\6")
        buf.write("\67\u015e\n\67\r\67\16\67\u015f\3\67\3\67\3\u0123\28\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8\3\2\16\4")
        buf.write("\2\f\f\17\17\3\2\62;\4\2GGgg\4\2--//\5\2C\\aac|\7\2\62")
        buf.write(";C\\^^aac|\3\2))\3\2$$\3\2^^\6\2$$^^pptt\6\2\f\f\17\17")
        buf.write("$$^^\5\2\13\f\17\17\"\"\u016e\2\3\3\2\2\2\2\5\3\2\2\2")
        buf.write("\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17")
        buf.write("\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3")
        buf.write("\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2")
        buf.write("\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3")
        buf.write("\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2")
        buf.write("\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3")
        buf.write("\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E")
        buf.write("\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2")
        buf.write("O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2")
        buf.write("\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2")
        buf.write("\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2")
        buf.write("\2\2\2m\3\2\2\2\3o\3\2\2\2\5q\3\2\2\2\7s\3\2\2\2\tu\3")
        buf.write("\2\2\2\13x\3\2\2\2\r{\3\2\2\2\17~\3\2\2\2\21\u0081\3\2")
        buf.write("\2\2\23\u0084\3\2\2\2\25\u0087\3\2\2\2\27\u0089\3\2\2")
        buf.write("\2\31\u008b\3\2\2\2\33\u008d\3\2\2\2\35\u008f\3\2\2\2")
        buf.write("\37\u0091\3\2\2\2!\u0094\3\2\2\2#\u0097\3\2\2\2%\u0099")
        buf.write("\3\2\2\2\'\u009b\3\2\2\2)\u009d\3\2\2\2+\u00a6\3\2\2\2")
        buf.write("-\u00a8\3\2\2\2/\u00aa\3\2\2\2\61\u00ac\3\2\2\2\63\u00ae")
        buf.write("\3\2\2\2\65\u00b0\3\2\2\2\67\u00b2\3\2\2\29\u00b4\3\2")
        buf.write("\2\2;\u00b6\3\2\2\2=\u00b8\3\2\2\2?\u00ba\3\2\2\2A\u00bc")
        buf.write("\3\2\2\2C\u00c1\3\2\2\2E\u00c7\3\2\2\2G\u00cb\3\2\2\2")
        buf.write("I\u00d0\3\2\2\2K\u00d6\3\2\2\2M\u00df\3\2\2\2O\u00e7\3")
        buf.write("\2\2\2Q\u00ea\3\2\2\2S\u00ef\3\2\2\2U\u00f2\3\2\2\2W\u00f8")
        buf.write("\3\2\2\2Y\u00fc\3\2\2\2[\u0102\3\2\2\2]\u010b\3\2\2\2")
        buf.write("_\u0112\3\2\2\2a\u011d\3\2\2\2c\u012c\3\2\2\2e\u0141\3")
        buf.write("\2\2\2g\u0143\3\2\2\2i\u014a\3\2\2\2k\u0151\3\2\2\2m\u015d")
        buf.write("\3\2\2\2op\7?\2\2p\4\3\2\2\2qr\7A\2\2r\6\3\2\2\2st\7<")
        buf.write("\2\2t\b\3\2\2\2uv\7~\2\2vw\7~\2\2w\n\3\2\2\2xy\7(\2\2")
        buf.write("yz\7(\2\2z\f\3\2\2\2{|\7?\2\2|}\7?\2\2}\16\3\2\2\2~\177")
        buf.write("\7#\2\2\177\u0080\7?\2\2\u0080\20\3\2\2\2\u0081\u0082")
        buf.write("\7>\2\2\u0082\u0083\7?\2\2\u0083\22\3\2\2\2\u0084\u0085")
        buf.write("\7@\2\2\u0085\u0086\7?\2\2\u0086\24\3\2\2\2\u0087\u0088")
        buf.write("\7-\2\2\u0088\26\3\2\2\2\u0089\u008a\7/\2\2\u008a\30\3")
        buf.write("\2\2\2\u008b\u008c\7,\2\2\u008c\32\3\2\2\2\u008d\u008e")
        buf.write("\7\61\2\2\u008e\34\3\2\2\2\u008f\u0090\7\'\2\2\u0090\36")
        buf.write("\3\2\2\2\u0091\u0092\7-\2\2\u0092\u0093\7-\2\2\u0093 ")
        buf.write("\3\2\2\2\u0094\u0095\7/\2\2\u0095\u0096\7/\2\2\u0096\"")
        buf.write("\3\2\2\2\u0097\u0098\7(\2\2\u0098$\3\2\2\2\u0099\u009a")
        buf.write("\7#\2\2\u009a&\3\2\2\2\u009b\u009c\7=\2\2\u009c(\3\2\2")
        buf.write("\2\u009d\u009e\7%\2\2\u009e\u009f\7k\2\2\u009f\u00a0\7")
        buf.write("p\2\2\u00a0\u00a1\7e\2\2\u00a1\u00a2\7n\2\2\u00a2\u00a3")
        buf.write("\7w\2\2\u00a3\u00a4\7f\2\2\u00a4\u00a5\7g\2\2\u00a5*\3")
        buf.write("\2\2\2\u00a6\u00a7\7\60\2\2\u00a7,\3\2\2\2\u00a8\u00a9")
        buf.write("\7.\2\2\u00a9.\3\2\2\2\u00aa\u00ab\7*\2\2\u00ab\60\3\2")
        buf.write("\2\2\u00ac\u00ad\7+\2\2\u00ad\62\3\2\2\2\u00ae\u00af\7")
        buf.write(">\2\2\u00af\64\3\2\2\2\u00b0\u00b1\7@\2\2\u00b1\66\3\2")
        buf.write("\2\2\u00b2\u00b3\7}\2\2\u00b38\3\2\2\2\u00b4\u00b5\7\177")
        buf.write("\2\2\u00b5:\3\2\2\2\u00b6\u00b7\7]\2\2\u00b7<\3\2\2\2")
        buf.write("\u00b8\u00b9\7_\2\2\u00b9>\3\2\2\2\u00ba\u00bb\7$\2\2")
        buf.write("\u00bb@\3\2\2\2\u00bc\u00bd\7e\2\2\u00bd\u00be\7j\2\2")
        buf.write("\u00be\u00bf\7c\2\2\u00bf\u00c0\7t\2\2\u00c0B\3\2\2\2")
        buf.write("\u00c1\u00c2\7h\2\2\u00c2\u00c3\7n\2\2\u00c3\u00c4\7q")
        buf.write("\2\2\u00c4\u00c5\7c\2\2\u00c5\u00c6\7v\2\2\u00c6D\3\2")
        buf.write("\2\2\u00c7\u00c8\7k\2\2\u00c8\u00c9\7p\2\2\u00c9\u00ca")
        buf.write("\7v\2\2\u00caF\3\2\2\2\u00cb\u00cc\7x\2\2\u00cc\u00cd")
        buf.write("\7q\2\2\u00cd\u00ce\7k\2\2\u00ce\u00cf\7f\2\2\u00cfH\3")
        buf.write("\2\2\2\u00d0\u00d1\7e\2\2\u00d1\u00d2\7q\2\2\u00d2\u00d3")
        buf.write("\7p\2\2\u00d3\u00d4\7u\2\2\u00d4\u00d5\7v\2\2\u00d5J\3")
        buf.write("\2\2\2\u00d6\u00d7\7x\2\2\u00d7\u00d8\7q\2\2\u00d8\u00d9")
        buf.write("\7n\2\2\u00d9\u00da\7c\2\2\u00da\u00db\7v\2\2\u00db\u00dc")
        buf.write("\7k\2\2\u00dc\u00dd\7n\2\2\u00dd\u00de\7g\2\2\u00deL\3")
        buf.write("\2\2\2\u00df\u00e0\7o\2\2\u00e0\u00e1\7w\2\2\u00e1\u00e2")
        buf.write("\7v\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4\7d\2\2\u00e4\u00e5")
        buf.write("\7n\2\2\u00e5\u00e6\7g\2\2\u00e6N\3\2\2\2\u00e7\u00e8")
        buf.write("\7k\2\2\u00e8\u00e9\7h\2\2\u00e9P\3\2\2\2\u00ea\u00eb")
        buf.write("\7g\2\2\u00eb\u00ec\7n\2\2\u00ec\u00ed\7u\2\2\u00ed\u00ee")
        buf.write("\7g\2\2\u00eeR\3\2\2\2\u00ef\u00f0\7f\2\2\u00f0\u00f1")
        buf.write("\7q\2\2\u00f1T\3\2\2\2\u00f2\u00f3\7y\2\2\u00f3\u00f4")
        buf.write("\7j\2\2\u00f4\u00f5\7k\2\2\u00f5\u00f6\7n\2\2\u00f6\u00f7")
        buf.write("\7g\2\2\u00f7V\3\2\2\2\u00f8\u00f9\7h\2\2\u00f9\u00fa")
        buf.write("\7q\2\2\u00fa\u00fb\7t\2\2\u00fbX\3\2\2\2\u00fc\u00fd")
        buf.write("\7d\2\2\u00fd\u00fe\7t\2\2\u00fe\u00ff\7g\2\2\u00ff\u0100")
        buf.write("\7c\2\2\u0100\u0101\7m\2\2\u0101Z\3\2\2\2\u0102\u0103")
        buf.write("\7e\2\2\u0103\u0104\7q\2\2\u0104\u0105\7p\2\2\u0105\u0106")
        buf.write("\7v\2\2\u0106\u0107\7k\2\2\u0107\u0108\7p\2\2\u0108\u0109")
        buf.write("\7w\2\2\u0109\u010a\7g\2\2\u010a\\\3\2\2\2\u010b\u010c")
        buf.write("\7t\2\2\u010c\u010d\7g\2\2\u010d\u010e\7v\2\2\u010e\u010f")
        buf.write("\7w\2\2\u010f\u0110\7t\2\2\u0110\u0111\7p\2\2\u0111^\3")
        buf.write("\2\2\2\u0112\u0113\7\61\2\2\u0113\u0114\7\61\2\2\u0114")
        buf.write("\u0118\3\2\2\2\u0115\u0117\n\2\2\2\u0116\u0115\3\2\2\2")
        buf.write("\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3")
        buf.write("\2\2\2\u0119\u011b\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011c")
        buf.write("\b\60\2\2\u011c`\3\2\2\2\u011d\u011e\7\61\2\2\u011e\u011f")
        buf.write("\7,\2\2\u011f\u0123\3\2\2\2\u0120\u0122\13\2\2\2\u0121")
        buf.write("\u0120\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0123\u0121\3\2\2\2\u0124\u0126\3\2\2\2\u0125\u0123\3")
        buf.write("\2\2\2\u0126\u0127\7,\2\2\u0127\u0128\7\61\2\2\u0128\u0129")
        buf.write("\3\2\2\2\u0129\u012a\b\61\2\2\u012ab\3\2\2\2\u012b\u012d")
        buf.write("\t\3\2\2\u012c\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e")
        buf.write("\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012fd\3\2\2\2\u0130")
        buf.write("\u0131\5c\62\2\u0131\u0132\7\60\2\2\u0132\u0138\5c\62")
        buf.write("\2\u0133\u0135\t\4\2\2\u0134\u0136\t\5\2\2\u0135\u0134")
        buf.write("\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u0139\5c\62\2\u0138\u0133\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u0142\3\2\2\2\u013a\u013b\5c\62\2\u013b\u013d\t")
        buf.write("\4\2\2\u013c\u013e\t\5\2\2\u013d\u013c\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\5c\62\2\u0140")
        buf.write("\u0142\3\2\2\2\u0141\u0130\3\2\2\2\u0141\u013a\3\2\2\2")
        buf.write("\u0142f\3\2\2\2\u0143\u0147\t\6\2\2\u0144\u0146\t\7\2")
        buf.write("\2\u0145\u0144\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148h\3\2\2\2\u0149\u0147")
        buf.write("\3\2\2\2\u014a\u014d\t\b\2\2\u014b\u014e\13\2\2\2\u014c")
        buf.write("\u014e\7\f\2\2\u014d\u014b\3\2\2\2\u014d\u014c\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014f\u0150\t\b\2\2\u0150j\3\2\2")
        buf.write("\2\u0151\u0157\t\t\2\2\u0152\u0153\t\n\2\2\u0153\u0156")
        buf.write("\t\13\2\2\u0154\u0156\n\f\2\2\u0155\u0152\3\2\2\2\u0155")
        buf.write("\u0154\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3\2\2\2")
        buf.write("\u0157\u0158\3\2\2\2\u0158\u015a\3\2\2\2\u0159\u0157\3")
        buf.write("\2\2\2\u015a\u015b\t\t\2\2\u015bl\3\2\2\2\u015c\u015e")
        buf.write("\t\r\2\2\u015d\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\u0162\b\67\2\2\u0162n\3\2\2\2\17\2\u0118\u0123")
        buf.write("\u012e\u0135\u0138\u013d\u0141\u0147\u014d\u0155\u0157")
        buf.write("\u015f\3\b\2\2")
        return buf.getvalue()


class SmallCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    COMMA = 22
    LBRA = 23
    RBRA = 24
    LABRA = 25
    RABRA = 26
    LCBRA = 27
    RCBRA = 28
    LSBRA = 29
    RSBRA = 30
    QUOTE = 31
    TYPECHAR = 32
    TYPEFLOAT = 33
    TYPEINT = 34
    TYPEVOID = 35
    CONST = 36
    VOLATILE = 37
    MUTABLE = 38
    IF = 39
    ELSE = 40
    DO = 41
    WHILE = 42
    FOR = 43
    BREAK = 44
    CONTINUE = 45
    RETURN = 46
    COMMENT = 47
    MULTICOMMENT = 48
    INTEGER = 49
    FLOAT = 50
    IDENTIFIER = 51
    CHARACTER = 52
    STRING = 53
    WS = 54

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'?'", "':'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
            "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'&'", 
            "'!'", "';'", "'#include'", "'.'", "','", "'('", "')'", "'<'", 
            "'>'", "'{'", "'}'", "'['", "']'", "'\"'", "'char'", "'float'", 
            "'int'", "'void'", "'const'", "'volatile'", "'mutable'", "'if'", 
            "'else'", "'do'", "'while'", "'for'", "'break'", "'continue'", 
            "'return'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", "LCBRA", "RCBRA", 
            "LSBRA", "RSBRA", "QUOTE", "TYPECHAR", "TYPEFLOAT", "TYPEINT", 
            "TYPEVOID", "CONST", "VOLATILE", "MUTABLE", "IF", "ELSE", "DO", 
            "WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", "COMMENT", "MULTICOMMENT", 
            "INTEGER", "FLOAT", "IDENTIFIER", "CHARACTER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "COMMA", "LBRA", "RBRA", "LABRA", "RABRA", "LCBRA", 
                  "RCBRA", "LSBRA", "RSBRA", "QUOTE", "TYPECHAR", "TYPEFLOAT", 
                  "TYPEINT", "TYPEVOID", "CONST", "VOLATILE", "MUTABLE", 
                  "IF", "ELSE", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", 
                  "RETURN", "COMMENT", "MULTICOMMENT", "INTEGER", "FLOAT", 
                  "IDENTIFIER", "CHARACTER", "STRING", "WS" ]

    grammarFileName = "SmallC.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


